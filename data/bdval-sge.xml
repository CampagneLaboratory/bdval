<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2010 Institute for Computational Biomedicine,
  ~                    Weill Medical College of Cornell University
  ~
  ~  This program is free software; you can redistribute it and/or modify
  ~  it under the terms of the GNU General Public License as published by
  ~  the Free Software Foundation; either version 3 of the License, or
  ~  (at your option) any later version.
  ~
  ~  This program is distributed in the hope that it will be useful,
  ~  but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~  GNU General Public License for more details.
  ~
  ~  You should have received a copy of the GNU General Public License
  ~  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<project name="bdval-sge" basedir=".">
    <dirname property="bdval.basedir" file="${ant.file.bdval-sge}"/>
    <property file="${bdval.basedir}/bdval.properties"/>
    <import file="${bdval.basedir}/../buildsupport/build.xml"/>
    <import file="${bdval.basedir}/bdval.xml"/>

    <description>
        This build file defines macros and tasks used by the Biomarker
        Discovery and VALidation (BDVAL) framework. This file is not
        intended to be used directly, rather it should be included by
        other project specific build files that utilize BDVAL.
    </description>

    <var name="sge-file-counter" value="0" description="Used to distinguish condition sets"/>

    <macrodef name="setup-sge-job" description="Setup BDVAL for a SGE submission">
        <attribute name="job-name" default="${ant.project.name}" description="Name to associate with this job"/>
        <attribute name="tasks-per-node" default="1" description="Number of tasks to run per node"/>
        <attribute name="target" description="The ant target to run on the cluster"/>
        <attribute name="tag" description="Tag for the configuration"/>
        <attribute name="tag-description" description="Description of the configuration"/>
        <attribute name="output-directory" default="." description="Location for the job submission files"/>
        <attribute name="number-of-threads" default="8" description="Number of threads per job"/>
        <attribute name="jvm-max-memory" default="8g" description="The memory to allocate to the JVM per job"/>
        <attribute name="sge-max-memory" default="10g" description="The memory to allocate per job"/>
        <!-- TODO: <attribute name="email-address"/>-->

        <sequential>
            <fail message="Cannot setup a sge job since bdval.jar cannot be found">
                <condition>
                    <not>
                        <available file="${bdval.basedir}/../bdval.jar"/>
                    </not>
                </condition>
            </fail>

            <property name="job-dir" location="@{output-directory}/@{job-name}"/>

            <if>
                <or>
                    <available file="${job-dir}" type="dir"/>
                    <available file="${job-dir}/@{job-name}.qsub"/>
                </or>
                <then>
                    <input message="Submission with the name @{job-name} at ${job-dir} already exists. Overwrite? (y/n)"
                           validargs="y,n" addproperty="input-result"/>
                    <condition property="ok-to-continue">
                        <equals arg1="y" arg2="${input-result}"/>
                    </condition>
                    <fail unless="ok-to-continue">Build aborted by user.</fail>
                    <delete dir="${job-dir}"/>
                </then>
            </if>

            <!-- all method possibilities -->
            <property name="do.FC+P.logitboost" value="false"/>
            <property name="do.baseline" value="false"/>
            <property name="do.baseline-tune-C" value="false"/>
            <property name="do.coxreg-svmglobal" value="false"/>
            <property name="do.foldchange-genetic-algorithm" value="false"/>
            <property name="do.foldchange-svmglobal" value="false"/>
            <property name="do.foldchange-svmiterative" value="false"/>
            <property name="do.full-genetic-algorithm" value="false"/>
            <property name="do.genelist-genetic-algorithm" value="false"/>
            <property name="do.genelist-svmglobal" value="false"/>
            <property name="do.genelist-svmglobal-tune-C" value="false"/>
            <property name="do.k-star" value="false"/>
            <property name="do.logistic" value="false"/>
            <property name="do.logit-boost" value="false"/>
            <property name="do.minmax-svmglobal" value="false"/>
            <property name="do.naive-bayes" value="false"/>
            <property name="do.pathways-build-pathway-components" value="false"/>
            <property name="do.pathways-coxreg-svmglobal" value="false"/>
            <property name="do.pathways-ttest-svmglobal" value="false"/>
            <property name="do.pathways-tune-C" value="false"/>
            <property name="do.pathways.baseline" value="false"/>
            <property name="do.permutation-svmglobal" value="false"/>
            <property name="do.random-forest" value="false"/>
            <property name="do.svmiterative" value="false"/>
            <property name="do.ttest-genetic-algorithm" value="false"/>
            <property name="do.ttest-svmglobal" value="false"/>
            <property name="do.ttest-svmiterative" value="false"/>
            <property name="do.weka-feature-selection-scan" value="false"/>
            <property name="do.whole-chip" value="false"/>

            <!-- make sure all the splits are defined so that the job submission uses the same plan -->
            <execute-all-endpoints define-splits-only="true"/>

            <mkdir dir="${job-dir}"/>
            <copy todir="${job-dir}">
                <fileset dir="${bdval.basedir}/..">
                    <include name="bdval.jar"/>
                    <include name="buildsupport/**"/>
                </fileset>
            </copy>

            <copy file="${bdval.basedir}/../scripts/rserve/start-rserve.sh" todir="${job-dir}"/>
            <copy file="${bdval.basedir}/../scripts/rserve/stop-rserve.sh" todir="${job-dir}">
                <filterset>
                    <filter token="JOB-NAME" value="@{job-name}"/>
                </filterset>
            </copy>

            <!-- Create the actual job script that will launch bdval -->
            <copy todir="${job-dir}" file="${bdval.basedir}/../scripts/sge/bdval-sge.sh" filtering="true">
                <filterset>
                    <filter token="PROJECT" value="${ant.project.name}"/>
                    <filter token="TARGET" value="@{target}"/>
                    <filter token="TAG" value="@{tag}"/>
                    <filter token="TAG-DESCRIPTION" value="@{tag-description}"/>
                    <filter token="JOB-DIR" value="${job-dir}"/>
                    <filter token="JOB-NAME" value="@{job-name}"/>
                </filterset>
            </copy>

            <fixcrlf srcdir="${job-dir}" eol="unix" includes="*.sh"/>
            <chmod dir="${job-dir}" perm="u+x" includes="*.sh"/>

            <mkdir dir="${job-dir}/config"/>
            <!-- TODO - start instances based on the number of cpus -->
            <echoxml file="${job-dir}/config/RConnectionPool.xml">
                <RConnectionPool>
                    <RConfiguration>
                        <RServer host="localhost" port="6311"/>
                        <RServer host="localhost" port="6312"/>
                    </RConfiguration>
                </RConnectionPool>
            </echoxml>

            <!-- Two threads per node, memory size depends on node type -->
            <write-sge-local-property-file file="${job-dir}/config/${ant.project.name}-local.properties"
                    thread-number="@{number-of-threads}" jvm-max-memory="@{jvm-max-memory}"/>

            <copy file="${config}/log4j.properties.sample" tofile="${job-dir}/config/log4j.properties" failonerror="false"/>

            <!-- copy the build scripts, properties and fixed data -->
            <mkdir dir="${job-dir}/data"/>
            <copy todir="${job-dir}/data">
                <fileset dir="${bdval.basedir}/../data">
                    <include name="bdval.xml"/>
                    <include name="bdval-sge.xml"/>
                    <include name="${ant.project.name}.xml"/>
                    <include name="${ant.project.name}.properties"/>
                    <include name="sequences/**"/>
                    <include name="gene-lists/**"/>
                </fileset>
            </copy>

            <!-- Copy data needed for the job -->
            <!-- TODO: we could be smarter about this and only copy what is needed -->
            <!--
            <copy todir="${job-dir}/data/eval-data">
                <fileset dir="${eval-dataset-root}">
                    <include name="**/*"/>
                </fileset>
            </copy>
            -->
            <!-- Tell bdval not to try and compile when running -->
            <writeln file="${job-dir}/data/bdval.properties" append="false" message="use-bdval-jar=true"/>
            <writeln file="${job-dir}/data/bdval.properties" message="nocompile=true"/>

            <propertyselector property="all-do-properties" match="do\.([^\.]*)$" select="\0" delimiter=" "/>
            <echo message="${all-do-properties}"/>
            <!-- convert the endpoint names to a form that can be used in a regexp -->
            <propertyregex property="endpoint-regex-property" input="${all-endpoints}" regexp=" "
                           replace="|" casesensitive="false" defaultValue="${all-endpoints}"/>
            <echo level="verbose" message="Endpoints: ${all-endpoints}"/>
            <echo level="verbose" message="Endpoint regexp: ${endpoint-regex-property}"/>
            <!-- all properties that start with "do." but not an endpoint -->
            <propertyselector property="all-methods" match="^do\.(?!((${endpoint-regex-property})))(.*)$" select="\3"
                              delimiter=" "/>
            <echo level="verbose" message="Methods: ${all-methods}"/>

            <!-- Create a "README" for the job -->
            <writeln file="${job-dir}/@{job-name}-README.txt" append="false" message="@{job-name} "/>
            <writeln file="${job-dir}/@{job-name}-README.txt"
                     message="The following properties were set to true in this configuration"/>
            <for param="do-property" delimiter=" " list="${all-do-properties}">
                <sequential>
                    <if>
                        <istrue value="${@{do-property}}"/>
                        <then>
                            <writeln file="${job-dir}/@{job-name}-README.txt" message="@{do-property}"/>
                        </then>
                    </if>
                </sequential>
            </for>
            <for param="feature-selection-fold" delimiter=" " list="true false">
                <sequential>
                    <if>
                        <istrue value="${use-feature-selection-fold=@{feature-selection-fold}}"/>
                        <then>
                            <writeln file="${job-dir}/@{job-name}-README.txt"
                                     message="use-feature-selection-fold\=@{feature-selection-fold}"/>
                        </then>
                    </if>
                </sequential>
            </for>

            <!-- create "configurations" for each condition combination -->
            <for param="current-endpoint" delimiter=" " list="${all-endpoints}">
                <sequential>
                    <if>
                        <istrue value="${do.@{current-endpoint}}"/>
                        <then>
                            <for param="feature-selection-fold" delimiter=" " list="true false">
                                <sequential>
                                    <if>
                                        <istrue value="${use-feature-selection-fold=@{feature-selection-fold}}"/>
                                        <then>
                                            <for param="method" delimiter=" " list="${all-methods}">
                                                <sequential>
                                                    <if>
                                                        <istrue value="${do.@{method}}"/>
                                                        <then>
                                                            <collect-bdval-conditions
                                                                    all-endpoints="${all-endpoints}"
                                                                    all-methods="${all-methods}"
                                                                    do-endpoint="@{current-endpoint}"
                                                                    do-method="@{method}"
                                                                    feature-selection-fold="use-feature-selection-fold=@{feature-selection-fold}"
                                                                    file-prefix="${job-dir}/@{job-name}"
                                                                    tag-description="@{tag-description}"/>
                                                        </then>
                                                    </if>
                                                </sequential>
                                            </for>
                                        </then>
                                    </if>
                                </sequential>
                            </for>
                        </then>
                    </if>
                </sequential>
            </for>
            <echo level="info" message="Wrote a total of ${sge-file-counter} files"/>

            <!-- Create the SGE job submission script -->
            <copy file="${bdval.basedir}/../scripts/sge/bdval.qsub" tofile="${job-dir}/../@{job-name}.qsub" filtering="true" overwrite="true">
                <filterset>
                    <filter token="SGE-TASKS" value="${sge-file-counter}"/>
                    <filter token="JOB-NAME" value="@{job-name}"/>
                    <filter token="JOB-DIR" value="${job-dir}"/>
                    <filter token="SGE_MEMORY" value="@{sge-max-memory}"/>
                </filterset>
            </copy>

            <!-- TODO: what happens when extract-results.sh already exists in job-dir, and is this desired? -->
            <copy file="${bdval.basedir}/../scripts/sge/extract-results.sh" todir="${job-dir}/.." filtering="true">
                <filterset>
                    <filter token="PROJECT" value="${ant.project.name}"/>
                    <filter token="JOB-NAME" value="@{job-name}"/>
                </filterset>
            </copy>
            <fixcrlf srcdir="${job-dir}/.." eol="unix" includes="extract-results.sh"/>
            <chmod dir="${job-dir}/.." perm="u+x" includes="extract-results.sh"/>
        </sequential>
    </macrodef>

    <macrodef name="collect-bdval-conditions" description="Write a property file containing conditions for a single run">
        <attribute name="file-prefix"/>
        <attribute name="do-endpoint"/>
        <attribute name="all-endpoints"/>
        <attribute name="feature-selection-fold"/>
        <attribute name="do-method"/>
        <attribute name="all-methods"/>
        <attribute name="tag-description"/>

        <sequential>
            <!-- collect all the relevant properties (start with "my.sge.") and store -->
            <propertyset id="properties-starting-with-my-sge" dynamic="true">
                <propertyref prefix="my-sge."/>
                <mapper type="glob" from="my-sge.*" to="*"/>
            </propertyset>

            <var name="my-sge.tag-description" value="@{tag-description}"/>

            <!-- Endpoints -->
            <sortlist property="sorted-endpoints" value="@{all-endpoints}" delimiter=" "/>
            <for param="current-endpoint" list="${sorted-endpoints}" delimiter=" ">
                <sequential>
                    <var name="doit" value="false"/>
                    <if>
                        <equals arg1="@{do-endpoint}" arg2="@{current-endpoint}"/>
                        <then>
                            <var name="doit" value="true"/>
                        </then>
                        <else>
                            <var name="doit" value="false"/>
                        </else>
                    </if>
                    <var name="my-sge.do.@{current-endpoint}" value="${doit}"/>
                </sequential>
            </for>

            <!-- Methods -->
            <sortlist property="sorted-methods" value="@{all-methods}" delimiter=" "/>
            <for param="current-method" list="${sorted-methods}" delimiter=" ">
                <sequential>
                    <var name="doit" value="false"/>
                    <if>
                        <equals arg1="@{do-method}" arg2="@{current-method}"/>
                        <then>
                            <var name="doit" value="true"/>
                        </then>
                        <else>
                            <var name="doit" value="false"/>
                        </else>
                    </if>
                    <var name="my-sge.do.@{current-method}" value="${doit}"/>
                </sequential>
            </for>

            <!-- Feature Selection Fold -->
            <if>
                <equals arg1="use-feature-selection-fold=true" arg2="@{feature-selection-fold}"/>
                <then>
                    <var name="my-sge.use-feature-selection-fold=true" value="true"/>
                    <var name="my-sge.use-feature-selection-fold=false" value="false"/>
                </then>
                <else>
                    <var name="my-sge.use-feature-selection-fold=true" value="false"/>
                    <var name="my-sge.use-feature-selection-fold=false" value="true"/>
                </else>
            </if>

            <!-- Special case for weka-feature-selection-scan -->
            <if>
                <equals arg1="@{do-method}" arg2="weka-feature-selection-scan"/>
                <then>
                    <!-- Iterate over the various weka options -->
                    <for param="feature-selection-mode" delimiter=" " list="${weka-feature-selection-modes}">
                        <sequential>
                            <for param="weka-class" delimiter=" " list="${weka-classifiers}">
                                <sequential>
                                    <var name="my-sge.weka-feature-selection-modes" value="@{feature-selection-mode}"/>
                                    <var name="my-sge.weka-classifiers" value="@{weka-class}"/>
                                    <var name="my-sge.${@{weka-class}-classifier-classname}" value="${@{weka-class}-classifier-classname}"/>
                                    <write-sge-property-file file-prefix="@{file-prefix}"/>
                                </sequential>
                            </for>
                        </sequential>
                    </for>
                </then>
                <else>
                    <!-- Write the file with no weka settings -->
                    <var name="my-sge.weka-feature-selection-modes" unset="true"/>
                    <var name="my-sge.weka-classifiers" unset="true"/>
                    <for param="weka-class" delimiter=" " list="${weka-classifiers}">
                        <sequential>
                            <var name="my-sge.${@{weka-class}-classifier-classname}" unset="true"/>
                        </sequential>
                    </for>
                    <write-sge-property-file file-prefix="@{file-prefix}"/>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="write-sge-property-file" description="Writes a java properties file sge job properies">
        <attribute name="file-prefix"/>
        <sequential>
            <math result="sge-file-counter" operation="add" operand1="${sge-file-counter}"
                  operand2="1" datatype="int"/>
            <echo level="verbose" message="Counter is ${sge-file-counter}"/>
            <writeln file="@{file-prefix}.sge-tasks" message="${sge-file-counter}"/>

            <var name="sge-property-file" value="@{file-prefix}-${sge-file-counter}.properties"/>
            <echo level="info" message="Writing file: ${sge-property-file}"/>

            <echoproperties destfile="${sge-property-file}">
                <propertyset refid="properties-starting-with-my-sge"/>
            </echoproperties>
        </sequential>
    </macrodef>

    <macrodef name="write-sge-local-property-file" description="Writes a bdval local-properties file">
        <attribute name="file" description="name of the file to write"/>
        <attribute name="thread-number" default="8" description="The number of threads per job"/>
        <attribute name="jvm-max-memory" default="8g" description="The memory to allocate to the JVM per job"/>

        <sequential>
            <!-- collect all the relevant properties (start with "my.sge.") and store -->
            <propertyset id="properties-starting-with-my-sge-local" dynamic="true">
                <propertyref prefix="my-sge-local."/>
                <mapper type="glob" from="my-sge-local.*" to="*"/>
            </propertyset>

            <property name="my-sge-local.eval-dataset-root" location="${eval-dataset-root}"/>
            <property name="my-sge-local.computer.type" value="server"/>
            <property name="my-sge-local.server.thread-number" value="@{thread-number}"/>
            <property name="my-sge-local.server.memory" value="-Xmx@{jvm-max-memory}"/>

            <echo level="info" message="Writing file: @{file}"/>
            <echoproperties destfile="@{file}">
                <propertyset refid="properties-starting-with-my-sge-local"/>
            </echoproperties>
        </sequential>
    </macrodef>
</project>
