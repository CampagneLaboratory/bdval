<?xml version="1.0" encoding="utf-8"?>
<project name="bdval-pbs" basedir=".">
    <dirname property="bdval.basedir" file="${ant.file.bdval-pbs}"/>
    <property file="${bdval.basedir}/bdval.properties"/>
    <import file="${bdval.basedir}/../buildsupport/build.xml"/>
    <import file="${bdval.basedir}/bdval.xml"/>

    <description>
        This build file defines macros and tasks used by the Biomarker
        Discovery and VALidation (BDVAL) framework. This file is not
        intended to be used directly, rather it should be included by
        other project specific build files that utilize BDVAL.
    </description>

    <var name="pbs-file-counter" value="0" description="Used to distinguish condition sets"/>

    <macrodef name="setup-pbs-job" description="Setup BDVAL for a PBS submission">
        <attribute name="job-name" default="${ant.project.name}"
                   description="Name to associate with this job (must not be longer than 15 characters"/>
        <attribute name="pbs-master-node" default="master01" description="Name of the PBS head node"/>
        <attribute name="pbs-queue" default="normal" description="Name of the PBS queue for the submission"/>
        <attribute name="pbs-nodes" default="1" description="Number of nodes to request"/>
        <attribute name="tasks-per-node" default="1" description="Number of tasks to run per node"/>
        <attribute name="target" description="The ant target to run on the cluster"/>
        <attribute name="tag" description="Tag for the configuration"/>
        <attribute name="tag-description" description="Description of the configuration"/>
        <!--<attribute name="email-address"/>-->

        <sequential>
            <fail message="Cannot setup a pbs job since bdval.jar cannot be found">
                <condition>
                    <not>
                        <available file="${bdval.basedir}/../bdval.jar"/>
                    </not>
                </condition>
            </fail>

            <fail message="Job name (@{job-name}) must not be longer than 15 characters">
                <condition>
                    <length string="@{job-name}" when="greater" length="15"/>
                </condition>
            </fail>

            <if>
                <or>
                    <available file="@{job-name}" type="dir"/>
                    <available file="@{job-name}.qsub"/>
                </or>
                <then>
                    <input message="Submission with the name @{job-name} already exists. Overwrite? (y/n)"
                           validargs="y,n" addproperty="input-result"/>
                    <condition property="ok-to-continue">
                        <equals arg1="y" arg2="${input-result}"/>
                    </condition>
                    <fail unless="ok-to-continue">Build aborted by user.</fail>
                    <delete dir="@{job-name}"/>
                    <delete file="@{job-name}.qsub"/>
                </then>
            </if>

            <!-- all method possibilities -->
            <property name="do.FC+P.logitboost" value="false"/>
            <property name="do.baseline" value="false"/>
            <property name="do.baseline-tune-C" value="false"/>
            <property name="do.coxreg-svmglobal" value="false"/>
            <property name="do.foldchange-genetic-algorithm" value="false"/>
            <property name="do.foldchange-svmglobal" value="false"/>
            <property name="do.foldchange-svmiterative" value="false"/>
            <property name="do.full-genetic-algorithm" value="false"/>
            <property name="do.genelist-genetic-algorithm" value="false"/>
            <property name="do.genelist-svmglobal" value="false"/>
            <property name="do.genelist-svmglobal-tune-C" value="false"/>
            <property name="do.k-star" value="false"/>
            <property name="do.logistic" value="false"/>
            <property name="do.logit-boost" value="false"/>
            <property name="do.minmax-svmglobal" value="false"/>
            <property name="do.naive-bayes" value="false"/>
            <property name="do.pathways-build-pathway-components" value="false"/>
            <property name="do.pathways-coxreg-svmglobal" value="false"/>
            <property name="do.pathways-ttest-svmglobal" value="false"/>
            <property name="do.pathways-tune-C" value="false"/>
            <property name="do.pathways.baseline" value="false"/>
            <property name="do.permutation-svmglobal" value="false"/>
            <property name="do.random-forest" value="false"/>
            <property name="do.svmiterative" value="false"/>
            <property name="do.ttest-genetic-algorithm" value="false"/>
            <property name="do.ttest-svmglobal" value="false"/>
            <property name="do.ttest-svmiterative" value="false"/>
            <property name="do.weka-feature-selection-scan" value="false"/>
            <property name="do.whole-chip" value="false"/>

            <!-- make sure all the splits are defined so that the job submission uses the same plan -->
            <execute-all-endpoints define-splits-only="true"/>

            <property name="job-dir" location="@{job-name}"/>
            <mkdir dir="${job-dir}"/>
            <copy todir="${job-dir}">
                <fileset dir="${bdval.basedir}/..">
                    <include name="bdval.jar"/>
                    <include name="buildsupport/**"/>
                </fileset>
            </copy>

            <copy file="${bdval.basedir}/../scripts/pbs/start-rserve.sh" todir="${job-dir}"/>
            <copy file="${bdval.basedir}/../scripts/pbs/stop-rserve.sh" todir="${job-dir}"/>

            <!-- Create the actual job script that will launch bdval -->
            <copy todir="${job-dir}" file="${bdval.basedir}/../scripts/pbs/bdval-pbs.sh" filtering="true">
                <filterset>
                    <filter token="PROJECT" value="${ant.project.name}"/>
                    <filter token="TARGET" value="@{target}"/>
                    <filter token="TAG" value="@{tag}"/>
                    <filter token="TAG-DESCRIPTION" value="@{tag-description}"/>
                    <filter token="JOB-DIR" value="${job-dir}"/>
                    <filter token="MASTER-NODE" value="@{pbs-master-node}"/>
                </filterset>
            </copy>

            <fixcrlf srcdir="${job-dir}" eol="unix" includes="*.sh"/>
            <chmod dir="${job-dir}" perm="u+x" includes="*.sh"/>

            <mkdir dir="${job-dir}/config"/>
            <!-- TODO - start instances based on the number of cpus -->
            <echoxml file="${job-dir}/config/RConnectionPool.xml">
                <RConnectionPool>
                    <RConfiguration>
                        <RServer host="localhost" port="6311"/>
                        <RServer host="localhost" port="6312"/>
                    </RConfiguration>
                </RConnectionPool>
            </echoxml>

            <!-- Two threads per node, memory size depends on node type -->
<!-- TODO
            <dirname file="${eval-dataset-root}" property="eval-dir"/>
            <echo message="${eval-dir}"/>
-->
            <writeln file="${job-dir}/config/${ant.project.name}-local.properties" append="false"
                     message="eval-dataset-root=eval-data"/>
            <writeln file="${job-dir}/config/${ant.project.name}-local.properties"
                     message="computer.type=server"/>
            <writeln file="${job-dir}/config/${ant.project.name}-local.properties"
                     message="server.thread-number=2"/>
            <if>
                <equals arg1="@{pbs-queue}" arg2="fat"/>
                <then>
                    <writeln file="${job-dir}/config/${ant.project.name}-local.properties"
                             message="server.memory=-Xmx8g"/>
                </then>
                <else>
                    <writeln file="${job-dir}/config/${ant.project.name}-local.properties"
                             message="server.memory=-Xmx2g"/>
                </else>
            </if>

            <!-- copy log4j.properties if it exists -->
            <copy file="${config}/log4j.properties" todir="${job-dir}/config" failonerror="false"/>

            <mkdir dir="${job-dir}/data"/>
            <copy todir="${job-dir}/data">
                <fileset dir="${bdval.basedir}/../data">
                    <include name="bdval.xml"/>
                    <include name="bdval-pbs.xml"/>
                    <include name="${ant.project.name}.xml"/>
                    <include name="${ant.project.name}.properties"/>
                    <include name="sequences/**"/>
                    <include name="gene-lists/**"/>
                </fileset>
            </copy>

            <copy todir="${job-dir}/data/eval-data">
                <fileset dir="${eval-dataset-root}">
                    <include name="**/*"/>
                </fileset>
            </copy>

            <!-- Tell bdval not to try and compile when running -->
            <writeln file="${job-dir}/data/bdval.properties" append="false" message="use-bdval-jar=true"/>
            <writeln file="${job-dir}/data/bdval.properties" message="nocompile=true"/>

            <propertyselector property="all-do-properties" match="do\.([^\.]*)$" select="\0" delimiter=" "/>
            <echo message="${all-do-properties}"/>
            <!-- convert the endpoint names to a form that can be used in a regexp -->
            <propertyregex property="endpoint-regex-property" input="${all-endpoints}" regexp=" "
                           replace="|" casesensitive="false"/>
            <echo level="verbose" message="Endpoints: ${all-endpoints}"/>

            <!-- all properties that start with "do." but not an endpoint -->
            <propertyselector property="all-methods" match="^do\.(?!((${endpoint-regex-property})))(.*)$" select="\3"
                              delimiter=" "/>
            <echo level="verbose" message="Methods: ${all-methods}"/>

            <!-- Create a "README" for the job -->
            <writeln file="${job-dir}/@{job-name}-README.txt" append="false" message="@{job-name} "/>
            <writeln file="${job-dir}/@{job-name}-README.txt"
                     message="The following properties were set to true in this configuration"/>
            <for param="do-property" delimiter=" " list="${all-do-properties}">
                <sequential>
                    <if>
                        <istrue value="${@{do-property}}"/>
                        <then>
                            <writeln file="${job-dir}/@{job-name}-README.txt" message="@{do-property}"/>
                        </then>
                    </if>
                </sequential>
            </for>
            <for param="feature-selection-fold" delimiter=" " list="true false">
                <sequential>
                    <if>
                        <istrue value="${use-feature-selection-fold=@{feature-selection-fold}}"/>
                        <then>
                            <writeln file="${job-dir}/@{job-name}-README.txt"
                                     message="use-feature-selection-fold\=@{feature-selection-fold}"/>
                        </then>
                    </if>
                </sequential>
            </for>

            <!-- create "configurations" for each condition combination -->
            <for param="current-endpoint" delimiter=" " list="${all-endpoints}">
                <sequential>
                    <if>
                        <istrue value="${do.@{current-endpoint}}"/>
                        <then>
                            <for param="feature-selection-fold" delimiter=" " list="true false">
                                <sequential>
                                    <if>
                                        <istrue value="${use-feature-selection-fold=@{feature-selection-fold}}"/>
                                        <then>
                                            <for param="method" delimiter=" " list="${all-methods}">
                                                <sequential>
                                                    <if>
                                                        <istrue value="${do.@{method}}"/>
                                                        <then>
                                                            <collect-bdval-conditions
                                                                    all-endpoints="${all-endpoints}"
                                                                    all-methods="${all-methods}"
                                                                    do-endpoint="@{current-endpoint}"
                                                                    do-method="@{method}"
                                                                    feature-selection-fold="use-feature-selection-fold=@{feature-selection-fold}"
                                                                    file-prefix="${job-dir}/@{job-name}"
                                                                    tag-description="@{tag-description}"/>
                                                        </then>
                                                    </if>
                                                </sequential>
                                            </for>
                                        </then>
                                    </if>
                                </sequential>
                            </for>
                        </then>
                    </if>
                </sequential>
            </for>
            <echo level="info" message="Wrote a total of ${pbs-file-counter} files"/>

            <!-- Create the PBS job submission script -->
            <!-- TODO: need to handle the case where there is only on job to run - an array job is then invalid -->
            <copy file="${bdval.basedir}/../scripts/pbs/bdval.qsub" tofile="@{job-name}.qsub" filtering="true" overwrite="true">
                <filterset>
                    <filter token="PBS-QUEUE" value="@{pbs-queue}"/>
                    <filter token="PBS-NODES" value="@{pbs-nodes}"/>
                    <filter token="PBS-TASKS" value="${pbs-file-counter}"/>
                    <filter token="JOB-NAME" value="@{job-name}"/>
                    <filter token="JOB-DIR" value="${job-dir}"/>
                    <filter token="MASTER-NODE" value="@{pbs-master-node}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="collect-bdval-conditions" description="Write a property file containing conditions for a single run">
        <attribute name="file-prefix"/>
        <attribute name="do-endpoint"/>
        <attribute name="all-endpoints"/>
        <attribute name="feature-selection-fold"/>
        <attribute name="do-method"/>
        <attribute name="all-methods"/>
        <attribute name="tag-description"/>

        <sequential>
            <!-- collect all the relevant properties (start with "my.pbs.") and store -->
            <propertyset id="properties-starting-with-my-pbs" dynamic="true">
                <propertyref prefix="my-pbs."/>
                <mapper type="glob" from="my-pbs.*" to="*"/>
            </propertyset>

            <var name="my-pbs.tag-description" value="@{tag-description}"/>

            <!-- Endpoints -->
            <sortlist property="sorted-endpoints" value="@{all-endpoints}" delimiter=" "/>
            <for param="current-endpoint" list="${sorted-endpoints}" delimiter=" ">
                <sequential>
                    <var name="doit" value="false"/>
                    <if>
                        <equals arg1="@{do-endpoint}" arg2="@{current-endpoint}"/>
                        <then>
                            <var name="doit" value="true"/>
                        </then>
                        <else>
                            <var name="doit" value="false"/>
                        </else>
                    </if>
                    <var name="my-pbs.do.@{current-endpoint}" value="${doit}"/>
                </sequential>
            </for>

            <!-- Methods -->
            <sortlist property="sorted-methods" value="@{all-methods}" delimiter=" "/>
            <for param="current-method" list="${sorted-methods}" delimiter=" ">
                <sequential>
                    <var name="doit" value="false"/>
                    <if>
                        <equals arg1="@{do-method}" arg2="@{current-method}"/>
                        <then>
                            <var name="doit" value="true"/>
                        </then>
                        <else>
                            <var name="doit" value="false"/>
                        </else>
                    </if>
                    <var name="my-pbs.do.@{current-method}" value="${doit}"/>
                </sequential>
            </for>

            <!-- Feature Selection Fold -->
            <if>
                <equals arg1="use-feature-selection-fold=true" arg2="@{feature-selection-fold}"/>
                <then>
                    <var name="my-pbs.use-feature-selection-fold=true" value="true"/>
                    <var name="my-pbs.use-feature-selection-fold=false" value="false"/>
                </then>
                <else>
                    <var name="my-pbs.use-feature-selection-fold=true" value="false"/>
                    <var name="my-pbs.use-feature-selection-fold=false" value="true"/>
                </else>
            </if>

            <!-- Special case for weka-feature-selection-scan -->
            <if>
                <equals arg1="@{do-method}" arg2="weka-feature-selection-scan"/>
                <then>
                    <!-- Iterate over the various weka options -->
                    <for param="feature-selection-mode" delimiter=" " list="${weka-feature-selection-modes}">
                        <sequential>
                            <for param="weka-class" delimiter=" " list="${weka-classifiers}">
                                <sequential>
                                    <var name="my-pbs.weka-feature-selection-modes" value="@{feature-selection-mode}"/>
                                    <var name="my-pbs.weka-classifiers" value="@{weka-class}"/>
                                    <var name="my-pbs.${@{weka-class}-classifier-classname}" value="${@{weka-class}-classifier-classname}"/>
                                    <write-pbs-property-file file-prefix="@{file-prefix}"/>
                                </sequential>
                            </for>
                        </sequential>
                    </for>
                </then>
                <else>
                    <!-- Write the file with no weka settings -->
                    <var name="my-pbs.weka-feature-selection-modes" unset="true"/>
                    <var name="my-pbs.weka-classifiers" unset="true"/>
                    <for param="weka-class" delimiter=" " list="${weka-classifiers}">
                        <sequential>
                            <var name="my-pbs.${@{weka-class}-classifier-classname}" unset="true"/>
                        </sequential>
                    </for>
                    <write-pbs-property-file file-prefix="@{file-prefix}"/>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="write-pbs-property-file" description="Writes a java properties file pbs job properies">
        <attribute name="file-prefix"/>
        <sequential>
            <math result="pbs-file-counter" operation="add" operand1="${pbs-file-counter}"
                  operand2="1" datatype="int"/>
            <echo level="verbose" message="Counter is ${pbs-file-counter}"/>
            <writeln file="@{file-prefix}.pbs-tasks" message="${pbs-file-counter}"/>

            <var name="pbs-property-file" value="@{file-prefix}-${pbs-file-counter}.properties"/>
            <echo level="info" message="Writing file: ${pbs-property-file}"/>

            <echoproperties destfile="${pbs-property-file}">
                <propertyset refid="properties-starting-with-my-pbs"/>
            </echoproperties>
        </sequential>
    </macrodef>
</project>
